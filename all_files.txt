
===== FILE: all_files.txt =====


===== FILE: demo.html =====
<!DOCTYPE html>
<html lang="en" data-theme="codecademy">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>SkillTree Codecademy Theme Demo</title>

  <!-- Tailwind + DaisyUI via CDN -->
  <script src="https://cdn.tailwindcss.com"></script>
  <script>
    tailwind.config = {
      plugins: [require('daisyui')],
      daisyui: {
        themes: ['codecademy']
      }
    }
  </script>

  <!-- Lucide Icons -->
  <script src="https://cdn.jsdelivr.net/npm/lucide@latest/dist/lucide.min.js"></script>
</head>
<body class="flex h-screen bg-neutral text-base-content font-sans">

  <!-- Sidebar -->
  <aside class="w-60 bg-base-100 border-r p-6 flex flex-col">
    <h2 class="text-lg font-bold mb-8">Dashboard</h2>
    <nav class="flex-1 space-y-4">
      <a class="flex items-center space-x-2 px-3 py-2 rounded hover:bg-secondary hover:bg-opacity-20" href="#">
        <i data-lucide="layout"></i><span>Dashboard</span>
      </a>
      <a class="flex items-center space-x-2 px-3 py-2 rounded hover:bg-secondary hover:bg-opacity-20" href="#">
        <i data-lucide="book-open"></i><span>My learning</span>
      </a>
      <a class="flex items-center space-x-2 px-3 py-2 rounded hover:bg-secondary hover:bg-opacity-20" href="#">
        <i data-lucide="calendar"></i><span>Events</span>
      </a>
      <a class="flex items-center space-x-2 px-3 py-2 rounded hover:bg-secondary hover:bg-opacity-20" href="#">
        <i data-lucide="layout-list"></i><span>Projects</span>
      </a>
      <a class="flex items-center space-x-2 px-3 py-2 rounded hover:bg-secondary hover:bg-opacity-20" href="#">
        <i data-lucide="code"></i><span>Workspaces</span>
      </a>
    </nav>
    <div class="mt-8 p-4 border rounded-lg bg-base-200">
      <h3 class="font-bold mb-2">Try Plus or Pro</h3>
      <p class="text-sm mb-4">7-day free trial. Go deeper, earn certificates.</p>
      <button class="btn btn-primary btn-block">Try for free</button>
    </div>
  </aside>

  <!-- Main Content -->
  <div class="flex-1 flex flex-col overflow-auto">

    <!-- Top Navbar Spacer -->
    <header class="bg-base-100 border-b p-4 flex justify-between items-center">
      <h1 class="text-2xl font-bold">SkillTree</h1>
      <div class="space-x-4">
        <a class="hover:underline" href="#">Log In</a>
        <button class="btn btn-primary btn-sm">Sign Up</button>
      </div>
    </header>

    <main class="p-6 space-y-8 flex-1">

      <!-- Bootcamp Promo -->
      <section>
        <h2 class="text-xl font-semibold mb-4">Codecademy Bootcamps</h2>
        <div class="bg-secondary p-6 rounded-lg flex items-center justify-between space-x-6">
          <div>
            <h3 class="text-lg font-bold">Full Stack Developer Bootcamp for Beginners</h3>
            <p class="mt-2">Join our expert‚Äêled bootcamp to gain in-demand skills</p>
            <a class="mt-4 inline-block text-primary font-semibold" href="#">Register now ‚Üí</a>
          </div>
          <img src="https://via.placeholder.com/120x80.png?text=üéì" alt="bootcamp" />
        </div>
      </section>

      <!-- Keep Learning Card -->
      <section>
        <h2 class="text-xl font-semibold mb-4">Keep learning</h2>
        <div class="bg-base-100 rounded-lg shadow-lg overflow-hidden border">

          <!-- Progress Bar -->
          <div class="h-8 flex">
            <div class="bg-secondary w-0 md:w-1/3 flex items-center justify-center text-sm font-bold">
              33%
            </div>
            <div class="bg-base-200 flex-1"></div>
          </div>

          <!-- Content -->
          <div class="md:flex">
            <div class="p-6 flex-1">
              <p class="text-xs uppercase opacity-70">Course</p>
              <h3 class="text-lg font-bold">Learn Python 3</h3>
              <p class="mt-1 text-sm opacity-70">Current Module: Hello World</p>
            </div>
            <div class="border-l p-6 flex-1">
              <h4 class="font-semibold mb-2">Make a study plan</h4>
              <p class="text-sm opacity-70 mb-4">Build a learning rhythm that fits your schedule.</p>
              <button class="btn btn-outline btn-sm mr-2">Make a plan</button>
              <button class="btn btn-ghost btn-sm">Dismiss</button>
            </div>
          </div>

          <!-- Footer Actions -->
          <div class="bg-primary text-white p-4 text-center">
            <button class="font-semibold flex items-center justify-center w-full">
              Resume <i data-lucide="arrow-right" class="ml-2"></i>
            </button>
          </div>
        </div>
      </section>

      <!-- Follow your progress -->
      <section>
        <h2 class="text-xl font-semibold mb-4">Follow your progress</h2>
        <div class="bg-base-100 p-6 rounded-lg shadow-lg">
          <div class="grid md:grid-cols-2 gap-4">
            <div>
              <h4 class="text-sm font-medium mb-2">Computer science</h4>
              <div class="h-2 bg-base-200 rounded overflow-hidden mb-1">
                <div class="h-full bg-secondary w-4/5"></div>
              </div>
              <p class="text-xs opacity-70">80 XP</p>
            </div>

            <div>
              <h4 class="text-sm font-medium mb-2">IT</h4>
              <div class="h-2 bg-base-200 rounded overflow-hidden mb-1">
                <div class="h-full bg-secondary w-3/4"></div>
              </div>
              <p class="text-xs opacity-70">70 XP</p>
            </div>
          </div>
        </div>
      </section>

    </main>
  </div>

  <script>
    // Activate Lucide icons
    lucide.replace();
  </script>
</body>
</html>


===== FILE: backend\.env =====
MONGO_URI=mongodb+srv://hasinishrak2015:Hda8fm5in8TOPAdv@cluster0.gfpd7tx.mongodb.net/skilltree_db?retryWrites=true&w=majority&appName=Cluster0
PORT=5001

===== FILE: backend\package.json =====
{
  "name": "backend",
  "version": "1.0.0",
  "main": "src/server.js",
  "scripts": {
    "dev": "nodemon src/server.js",
    "start": "node src/server.js"
  },
  "type": "module",
  "keywords": [],
  "author": "",
  "license": "ISC",
  "description": "",
  "dependencies": {
    "bcrypt": "^6.0.0",
    "cors": "^2.8.5",
    "dotenv": "^16.5.0",
    "express": "^4.18.2",
    "jsonwebtoken": "^9.0.2",
    "mongoose": "^8.14.3"
  },
  "devDependencies": {
    "nodemon": "^3.1.10"
  }
}


===== FILE: frontend\.gitignore =====
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?


===== FILE: frontend\eslint.config.js =====
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import { defineConfig, globalIgnores } from 'eslint/config'

export default defineConfig([
  globalIgnores(['dist']),
  {
    files: ['**/*.{js,jsx}'],
    extends: [
      js.configs.recommended,
      reactHooks.configs['recommended-latest'],
      reactRefresh.configs.vite,
    ],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
      parserOptions: {
        ecmaVersion: 'latest',
        ecmaFeatures: { jsx: true },
        sourceType: 'module',
      },
    },
    rules: {
      'no-unused-vars': ['error', { varsIgnorePattern: '^[A-Z_]' }],
    },
  },
])


===== FILE: frontend\index.html =====
<!doctype html>
<html lang="en" data-theme="light-forest">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" href="https://cdn-icons-png.flaticon.com/512/489/489969.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>SkillTree</title>
  </head>
  <body class="h-full">
    <div id="root" class="h-full"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>


===== FILE: frontend\package.json =====
{
  "name": "frontend",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "axios": "^1.11.0",
    "lucide-react": "^0.536.0",
    "react": "^19.1.0",
    "react-dom": "^19.1.0",
    "react-hot-toast": "^2.5.2",
    "react-router-dom": "^7.7.1"
  },
  "devDependencies": {
    "@eslint/js": "^9.30.1",
    "@types/react": "^19.1.8",
    "@types/react-dom": "^19.1.6",
    "@vitejs/plugin-react": "^4.6.0",
    "autoprefixer": "^10.4.21",
    "daisyui": "^4.12.24",
    "eslint": "^9.30.1",
    "eslint-plugin-react-hooks": "^5.2.0",
    "eslint-plugin-react-refresh": "^0.4.20",
    "globals": "^16.3.0",
    "postcss": "^8.5.6",
    "tailwindcss": "^3.4.17",
    "vite": "^7.0.4"
  }
}


===== FILE: frontend\postcss.config.js =====
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}


===== FILE: frontend\README.md =====
# React + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Expanding the ESLint configuration

If you are developing a production application, we recommend using TypeScript with type-aware lint rules enabled. Check out the [TS template](https://github.com/vitejs/vite/tree/main/packages/create-vite/template-react-ts) for information on how to integrate TypeScript and [`typescript-eslint`](https://typescript-eslint.io) in your project.


===== FILE: frontend\tailwind.config.js =====
import daisyui from "daisyui";

/** @type {import('tailwindcss').Config} */
export default {
  content: ["./index.html", "./src/**/*.{js,jsx}"],
  theme: { extend: {} },
  plugins: [daisyui],
  daisyui: {
    themes: [
      // your custom light-forest theme
      {
        "light-forest": {
          "primary": "#237a57",
          "primary-focus": "#186649",
          "primary-content": "#ffffff",
          "secondary": "#3eae62",
          "secondary-focus": "#329858",
          "secondary-content": "#96C97B",
          "accent": "#becc24",
          "accent-focus": "#a6b01e",
          "accent-content": "#ffffff",
          "neutral": "#E3FFCF",
          "neutral-focus": "#e5e5e5",
          "neutral-content": "#253235",
          "base-100": "#ffffff",
          "base-200": "#f2f2f2",
          "base-300": "#e5e5e5",
          "base-content": "#253235",
          "info": "#2094f3",
          "success": "#009485",
          "warning": "#ff9900",
          "error": "#ff5724"
        }
      },
      // DaisyUI‚Äôs built-in dark ‚Äúforest‚Äù
      "forest"
    ],
  },
};


===== FILE: frontend\vite.config.js =====
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vite.dev/config/
export default defineConfig({
  plugins: [react()],
})


===== FILE: backend\src\server.js =====
import express from "express";
import cors from "cors";
import dotenv from "dotenv";
import { connectDB } from "./config/db.js";
import skillsRoutes from "./routes/skillsRoutes.js";
import authRoutes from "./routes/authRoutes.js";
import learningRoutes from "./routes/learningRoutes.js";

dotenv.config();
connectDB();

const app = express();
app.use(cors());
app.use(express.json());

app.use("/api/skills", skillsRoutes);
app.use("/api/auth", authRoutes);
app.use("/api/learning", learningRoutes);

const PORT = process.env.PORT || 5001;
app.listen(PORT, () => console.log("Server running on port", PORT));


===== FILE: backend\src\config\db.js =====
import mongoose from "mongoose";

export const connectDB = async () => {
    try{
        await mongoose.connect(process.env.MONGO_URI);

        console.log("MONGODB CONNECTED SUCCESSFULLY"); 

    }
    catch (error){
        console.error("Error connectring to Mongodb", error);
        process.exit(1);
    } 

}

===== FILE: backend\src\controllers\authController.js =====
import User from "../models/User.js";
import jwt from "jsonwebtoken";

const JWT_SECRET = process.env.JWT_SECRET || "replace_this_with_env_secret";


export async function register(req, res) {
  try {
    const { username, password } = req.body;
    if (!username || !password)
      return res.status(400).json({ message: "Missing fields" });

    if (await User.findOne({ username }))
      return res.status(409).json({ message: "Username taken" });

    const user = await new User({ username, password }).save();
    
    const token = jwt.sign(
      { id: user._id, isAdmin: user.isAdmin },
      JWT_SECRET,
      { expiresIn: "7d" }
    );

    res.status(201).json({
      username: user.username,
      token,
      isAdmin: user.isAdmin,  
    });
  } catch {
    res.status(500).json({ message: "Server error" });
  }
}


export async function login(req, res) {
  try {
    const { username, password } = req.body;
    if (!username || !password)
      return res.status(400).json({ message: "Missing fields" });

    const user = await User.findOne({ username });
    if (!user || !(await user.comparePassword(password)))
      return res.status(401).json({ message: "Invalid credentials" });

    const token = jwt.sign(
      { id: user._id, isAdmin: user.isAdmin },
      JWT_SECRET,
      { expiresIn: "7d" }
    );

    res.json({
      username: user.username,
      token,
      isAdmin: user.isAdmin,  
    });
  } catch {
    res.status(500).json({ message: "Server error" });
  }
}


===== FILE: backend\src\controllers\learningController.js =====
import User from "../models/User.js";
import Skill from "../models/Skill.js";


export async function startLearning(req, res) {
  try {
    const user = await User.findById(req.user.id);
    const skill = await Skill.findById(req.params.skillId);
    if (!skill) return res.status(404).json({ message: "Skill not found" });

    const exists = user.learningSkills.some(e =>
      e.skill.equals(skill._id)
    );
    if (!exists) {
      user.learningSkills.push({
        skill: skill._id,
        completedTasks: Array(skill.tasks.length).fill(false),
      });
      await user.save();
    }
    res.json({ message: "Skill added" });
  } catch {
    res.status(500).json({ message: "Server error" });
  }
}


export async function getLearningSkills(req, res) {
  try {
    const user = await User.findById(req.user.id).populate("learningSkills.skill");
    const payload = user.learningSkills.map(e => ({
      _id:            e.skill._id,
      name:           e.skill.name,
      category:       e.skill.category,
      tasks:          e.skill.tasks,
      completedTasks: e.completedTasks,
    }));
    res.json(payload);
  } catch {
    res.status(500).json({ message: "Server error" });
  }
}


export async function getLearningSkill(req, res) {
  try {
    const user = await User.findById(req.user.id).populate("learningSkills.skill");
    const entry = user.learningSkills.find(e =>
      e.skill._id.equals(req.params.skillId)
    );
    if (!entry) return res.status(404).json({ message: "Not learning this skill" });

    res.json({
      _id:            entry.skill._id,
      name:           entry.skill.name,
      category:       entry.skill.category,
      tasks:          entry.skill.tasks,
      completedTasks: entry.completedTasks,
    });
  } catch {
    res.status(500).json({ message: "Server error" });
  }
}


export async function toggleTask(req, res) {
  try {
    const idx = parseInt(req.params.taskIndex, 10);
    const user = await User.findById(req.user.id);
    const entry = user.learningSkills.find(e =>
      e.skill.equals(req.params.skillId)
    );
    if (!entry) return res.status(404).json({ message: "Not learning this skill" });
    if (isNaN(idx) || idx < 0 || idx >= entry.completedTasks.length) {
      return res.status(400).json({ message: "Invalid task index" });
    }

    entry.completedTasks[idx] = !entry.completedTasks[idx];
    entry.lastUpdated = new Date();
    await user.save();

    res.json({ completedTasks: entry.completedTasks });
  } catch {
    res.status(500).json({ message: "Server error" });
  }
}


===== FILE: backend\src\controllers\skillsController.js =====
import Skill from "../models/Skill.js";


export async function getAllSkills(req, res) {
  try {
    const skills = await Skill.find().sort({ createdAt: -1 });
    res.json(skills);
  } catch {
    res.status(500).json({ message: "Internal server error" });
  }
}


export async function getSkillById(req, res) {
  try {
    const skill = await Skill.findById(req.params.id);
    if (!skill) return res.status(404).json({ message: "Skill not found" });
    res.json(skill);
  } catch {
    res.status(500).json({ message: "Internal server error" });
  }
}


export async function createSkill(req, res) {
  try {
    const { name, category, tasks } = req.body;
    const created = await new Skill({ name, category, tasks }).save();
    res.status(201).json(created);
  } catch {
    res.status(500).json({ message: "Internal server error" });
  }
}


export async function updateSkill(req, res) {
  try {
    const { name, category, tasks } = req.body;
    const updated = await Skill.findByIdAndUpdate(
      req.params.id,
      { name, category, tasks },
      { new: true }
    );
    if (!updated) return res.status(404).json({ message: "Skill not found" });
    res.json(updated);
  } catch {
    res.status(500).json({ message: "Internal server error" });
  }
}


export async function deleteSkill(req, res) {
  try {
    const deleted = await Skill.findByIdAndDelete(req.params.id);
    if (!deleted) return res.status(404).json({ message: "Skill not found" });
    res.json({ message: "Skill deleted" });
  } catch {
    res.status(500).json({ message: "Internal server error" });
  }
}


===== FILE: backend\src\middleware\authMiddleware.js =====
import jwt from "jsonwebtoken";
const JWT_SECRET = process.env.JWT_SECRET || "replace_this_with_env_secret";

export const protect = (req, res, next) => {
  let token;
  if (
    req.headers.authorization &&
    req.headers.authorization.startsWith("Bearer")
  ) {
    token = req.headers.authorization.split(" ")[1];
  }
  if (!token) {
    return res.status(401).json({ message: "Not authorized, no token" });
  }
  try {
    const decoded = jwt.verify(token, JWT_SECRET);
    req.user = { id: decoded.id, isAdmin: decoded.isAdmin };
    next();
  } catch {
    res.status(401).json({ message: "Token invalid" });
  }
};

export const admin = (req, res, next) => {
  if (!req.user || !req.user.isAdmin) {
    return res.status(403).json({ message: "Admin privileges required" });
  }
  next();
};


===== FILE: backend\src\models\Skill.js =====
import mongoose from "mongoose";

const taskSchema = new mongoose.Schema({
  title:   { type: String, required: true },
  content: { type: String, required: true },
});

const skillSchema = new mongoose.Schema(
  {
    name:     { type: String, required: true },
    category: { type: String, required: true },      
    tasks:    { type: [taskSchema], default: [] },
  },
  { timestamps: true }
);

export default mongoose.model("Skill", skillSchema);


===== FILE: backend\src\models\User.js =====
import mongoose from "mongoose";
import bcrypt from "bcrypt";

const learningSkillSchema = new mongoose.Schema({
  skill: {
    type: mongoose.Schema.Types.ObjectId,
    ref: "Skill",
    required: true,
  },
  completedTasks: {
    type: [Boolean],
    default: [],
  },
  startedAt: {
    type: Date,
    default: Date.now,
  },
  lastUpdated: {
    type: Date,
    default: Date.now,
  },
});

const userSchema = new mongoose.Schema(
  {
    username:       { type: String, required: true, unique: true },
    password:       { type: String, required: true },
    isAdmin:        { type: Boolean, default: false },
    learningSkills: [learningSkillSchema],
  },
  { timestamps: true }
);

userSchema.pre("save", async function (next) {
  if (!this.isModified("password")) return next();
  this.password = await bcrypt.hash(this.password, 10);
  next();
});

userSchema.methods.comparePassword = function (candidate) {
  return bcrypt.compare(candidate, this.password);
};

export default mongoose.model("User", userSchema);


===== FILE: backend\src\routes\authRoutes.js =====
import express from "express";
import { register, login } from "../controllers/authController.js";

const router = express.Router();

router.post("/register", register);
router.post("/login", login);

export default router;


===== FILE: backend\src\routes\learningRoutes.js =====
import express from "express";
import {
  startLearning,
  getLearningSkills,
  getLearningSkill,
  toggleTask,
} from "../controllers/learningController.js";
import { protect } from "../middleware/authMiddleware.js";

const router = express.Router();
router.use(protect);

router.get("/", getLearningSkills);
router.get("/:skillId", getLearningSkill);
router.post("/:skillId", startLearning);
router.patch("/:skillId/task/:taskIndex", toggleTask);

export default router;


===== FILE: backend\src\routes\skillsRoutes.js =====
import express from "express";
import {
  getAllSkills,
  getSkillById,
  createSkill,
  updateSkill,
  deleteSkill,
} from "../controllers/skillsController.js";
import { protect, admin } from "../middleware/authMiddleware.js";

const router = express.Router();


router.get("/", getAllSkills);
router.get("/:id", getSkillById);

router.post("/", protect, admin, createSkill);
router.put("/:id", protect, admin, updateSkill);
router.delete("/:id", protect, admin, deleteSkill);

export default router;


===== FILE: frontend\src\App.jsx =====
import { Routes, Route, useLocation, Navigate } from 'react-router-dom';
import { getToken, getIsAdmin } from './lib/auth';

import UserNavbar from './components/user/UserNavbar';
import LoginPage from './views/user/LoginPage';
import RegisterPage from './views/user/RegisterPage';
import DashboardPage from './views/user/DashboardPage';
import UserSkillsListPage from './views/user/UserSkillsListPage';
import UserSkillDetailPage from './views/user/UserSkillDetailPage';
import DashboardSkillDetailPage from './views/user/DashboardSkillDetailPage';
import SkillForestPage from './views/user/SkillForestPage'; // NEW

import AdminSkillsListPage from './views/admin/AdminSkillsListPage';
import AdminCreateSkillPage from './views/admin/AdminCreateSkillPage';
import AdminSkillDetailPage from './views/admin/AdminSkillDetailPage';

export default function App() {
  const { pathname } = useLocation();
  const token      = getToken();
  const isAdmin    = getIsAdmin();
  const isLoggedIn = !!token;

  // routes that use the "user" layout
  const isUserRoute = ['/login','/register','/dashboard','/skills','/forest'] // + /forest
    .some(p => pathname.startsWith(p));

  return (
    <div className="flex flex-col h-screen bg-base-200 text-base-content">
      <UserNavbar />

      <div className="flex-1 overflow-auto">
        {isUserRoute ? (
          <Routes>
            <Route
              path="/login"
              element={isLoggedIn
                ? <Navigate to={isAdmin ? '/' : '/dashboard'} replace />
                : <LoginPage />}
            />
            <Route
              path="/register"
              element={isLoggedIn
                ? <Navigate to={isAdmin ? '/' : '/dashboard'} replace />
                : <RegisterPage />}
            />

            {/* Dashboard and its detail page */}
            <Route
              path="/dashboard"
              element={isLoggedIn
                ? <DashboardPage />
                : <Navigate to="/login" replace />}
            />
            <Route
              path="/dashboard/:id"
              element={isLoggedIn
                ? <DashboardSkillDetailPage />
                : <Navigate to="/login" replace />}
            />

            {/* All-skills list + its readonly detail page */}
            <Route
              path="/skills"
              element={isLoggedIn
                ? <UserSkillsListPage />
                : <Navigate to="/login" replace />}
            />
            <Route
              path="/skills/:id"
              element={isLoggedIn
                ? <UserSkillDetailPage />
                : <Navigate to="/login" replace />}
            />

            {/* NEW: Skill Forest */}
            <Route
              path="/forest"
              element={isLoggedIn
                ? <SkillForestPage />
                : <Navigate to="/login" replace />}
            />
          </Routes>
        ) : (
          <main className="max-w-5xl mx-auto px-4 py-10">
            <Routes>
              <Route
                path="/"
                element={isLoggedIn && isAdmin
                  ? <AdminSkillsListPage />
                  : <Navigate to="/dashboard" replace />}
              />
              <Route
                path="/create-skill"
                element={isLoggedIn && isAdmin
                  ? <AdminCreateSkillPage />
                  : <Navigate to="/dashboard" replace />}
              />
              <Route
                path="/skill/:id"
                element={isLoggedIn && isAdmin
                  ? <AdminSkillDetailPage />
                  : <Navigate to="/dashboard" replace />}
              />
            </Routes>
          </main>
        )}
      </div>
    </div>
  );
}


===== FILE: frontend\src\index.css =====
@tailwind base;
@tailwind components;
@tailwind utilities;

/* fill whole viewport */
html, body, #root {
  height: 100%;
  margin: 0;
}

/* background now uses your theme‚Äôs neutral color */
body {
  @apply font-sans bg-neutral text-base-content;
}

/* keep softer corners since Codecademy uses rounded cards */
.card,
.btn {
  @apply rounded-lg border-none;
}

/* ================================
   Whiter drop-shadows in dark theme
   ================================ */
[data-theme="forest"] .shadow-sm {
  box-shadow: 0 1px 2px rgba(255,255,255,0.05) !important;
}

[data-theme="forest"] .shadow {
  box-shadow: 0 1px 3px rgba(255,255,255,0.1), 0 1px 2px rgba(255,255,255,0.06) !important;
}

[data-theme="forest"] .shadow-md {
  box-shadow: 0 4px 6px rgba(255,255,255,0.1), 0 2px 4px rgba(255,255,255,0.05) !important;
}

[data-theme="forest"] .shadow-lg {
  box-shadow: 0 10px 15px rgba(255,255,255,0.1), 0 4px 6px rgba(255,255,255,0.05) !important;
}

[data-theme="forest"] .shadow-xl {
  box-shadow: 0 20px 25px rgba(255,255,255,0.1), 0 10px 10px rgba(255,255,255,0.05) !important;
}

[data-theme="forest"] .shadow-2xl {
  box-shadow: 0 25px 50px rgba(255,255,255,0.1) !important;
}


===== FILE: frontend\src\main.jsx =====
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App.jsx';
import './index.css';
import { Toaster } from 'react-hot-toast';

import { BrowserRouter } from 'react-router-dom';

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <BrowserRouter>
      <App />
      <Toaster />
    </BrowserRouter>
  </React.StrictMode>
);


===== FILE: frontend\src\lib\auth.js =====

export function saveToken(token) {
  localStorage.setItem("skilltree_token", token);
}
export function getToken() {
  return localStorage.getItem("skilltree_token");
}
export function clearToken() {
  localStorage.removeItem("skilltree_token");
}

export function saveIsAdmin(flag) {
  localStorage.setItem("skilltree_isAdmin", String(flag));
}
export function getIsAdmin() {
  return localStorage.getItem("skilltree_isAdmin") === "true";
}
export function clearIsAdmin() {
  localStorage.removeItem("skilltree_isAdmin");
}


export function clearAuth() {
  clearToken();
  clearIsAdmin();
}


===== FILE: frontend\src\lib\axios.js =====
import axios from "axios";
import { getToken, clearAuth } from "./auth";

const BASE_URL =
  import.meta.env.MODE === "development"
    ? "http://localhost:5001/api"
    : "/api";

const api = axios.create({ baseURL: BASE_URL });

api.interceptors.request.use((config) => {
  const token = getToken();
  if (token) config.headers.Authorization = `Bearer ${token}`;
  return config;
});


api.interceptors.response.use(
  (res) => res,
  (error) => {
    const status = error.response?.status;
    const reqUrl = error.config?.url || "";

    if (
      status === 401 &&
      !reqUrl.endsWith("/auth/login") &&
      !reqUrl.endsWith("/auth/register")
    ) {
      clearAuth();
      window.location.href = "/login";
    }
    return Promise.reject(error);
  }
);

export default api;


===== FILE: frontend\src\lib\categories.js =====
export const CATEGORIES = [
  "Programming",
  "Web Development",
  "Miscellaneous",
  "Sports"
];


===== FILE: frontend\src\lib\dashboard.js =====
// frontend/src/lib/dashboard.js
export function getLearning() {
  return JSON.parse(localStorage.getItem("skilltree_learning") || "[]");
}

export function addLearning(skillId) {
  const list = getLearning();
  if (!list.includes(skillId)) {
    list.push(skillId);
    localStorage.setItem("skilltree_learning", JSON.stringify(list));
  }
}


===== FILE: frontend\src\lib\utils.js =====
export function formatDate(date) {
  return date.toLocaleDateString("en-US", {
    month: "short",
    day: "numeric",
    year: "numeric",
  });
}

===== FILE: frontend\src\components\admin\AdminNavbar.jsx =====
import { Link } from "react-router-dom";
import { SunIcon, MoonIcon } from "lucide-react";
import { useState, useEffect } from "react";

export default function AdminNavbar() {
  const [forestMode, setForestMode] = useState(
    localStorage.getItem("theme") === "forest"
  );

  useEffect(() => {
    const theme = forestMode ? "forest" : "lemonade";
    document.documentElement.setAttribute("data-theme", theme);
    localStorage.setItem("theme", theme);
  }, [forestMode]);

  return (
    <nav className="navbar bg-base-100 shadow-md">
      <div className="container mx-auto flex items-center justify-between px-4">
        <Link to="/" className="text-2xl font-bold">
          SkillTree&nbsp;<span className="text-primary">Admin</span>
        </Link>

        <button
          aria-label="Toggle theme"
          className="btn btn-ghost btn-circle btn-sm"
          onClick={() => setForestMode(!forestMode)}
        >
          {forestMode ? (
            <SunIcon className="h-5 w-5" />
          ) : (
            <MoonIcon className="h-5 w-5" />
          )}
        </button>
      </div>
    </nav>
  );
}


===== FILE: frontend\src\components\admin\AdminSkillCard.jsx =====
import { Link } from "react-router-dom";

export default function AdminSkillCard({ skill }) {
  return (
    <Link
      to={`/skill/${skill._id}`}
      className="
        card bg-neutral shadow hover:shadow-lg transition
        border border-black /* static black */"
    >
      <div className="card-body">
        <div className="flex items-start justify-between gap-3">
          <h3 className="card-title text-lg flex-1 break-words">
            {skill.name}
          </h3>
          <span
            className="badge badge-primary px-4 py-[6px] text-xs font-semibold whitespace-nowrap overflow-hidden text-ellipsis max-w-[10rem]"
            title={skill.category}
          >
            {skill.category}
          </span>
        </div>
        <p className="text-sm opacity-70 mt-1">
          {skill.tasks.length} task{skill.tasks.length !== 1 && "s"}
        </p>
      </div>
    </Link>
  );
}


===== FILE: frontend\src\components\user\Sidebar.jsx =====
import { Link, useNavigate, useLocation } from "react-router-dom";
import { clearAuth } from "../../lib/auth";
import { CATEGORIES } from "../../lib/categories";
import {
  LayersIcon,
  CircleIcon,
  CheckCircle2Icon,
  TagIcon,
  UserIcon,
  LogOutIcon,
} from "lucide-react";

export default function Sidebar({ learning }) {
  const navigate = useNavigate();
  const { pathname, search } = useLocation();
  const qs = new URLSearchParams(search);

  const completed = learning.filter(
    (s) =>
      s.tasks.length &&
      s.completedTasks.filter(Boolean).length === s.tasks.length
  ).length;
  const inProgress = learning.length - completed;

  const active = (cond) =>
    cond ? "active bg-primary text-primary-content" : "";

  const logout = () => {
    clearAuth();
    navigate("/login");
  };

  return (
    <div className="container mx-auto px-4 ">
      <aside
        className="
          fixed top-20
          w-64 h-100
          bg-base-100 border border-primary
          shadow-lg flex flex-col z-30
        "
      >
        <ul className="menu menu-vertical px-4 py-6 flex-1 overflow-y-auto">
          <li className="menu-title"><span>Main</span></li>
          <li className={active(pathname === "/dashboard" && qs.get("filter") === "all")}>
            <Link to="/dashboard?filter=all" className="flex items-center gap-2">
              <LayersIcon className="h-5 w-5" />
              <span>All Skills</span>
            </Link>
          </li>

          <li className="menu-title mt-4"><span>My Progress</span></li>
          <li className={active(!qs.get("filter") || qs.get("filter") === "in")}>
            <Link to="/dashboard" className="flex items-center gap-2">
              <CircleIcon className="h-5 w-5" />
              <span>In Progress</span>
              <span className="badge badge-info ml-auto">{inProgress}</span>
            </Link>
          </li>
          <li className={active(qs.get("filter") === "completed")}>
            <Link to="/dashboard?filter=completed" className="flex items-center gap-2">
              <CheckCircle2Icon className="h-5 w-5" />
              <span>Completed</span>
              <span className="badge badge-success ml-auto">{completed}</span>
            </Link>
          </li>

          <li className="menu-title mt-4"><span>Categories</span></li>
          {CATEGORIES.map((c) => (
            <li key={c} className={active(qs.get("category") === c)}>
              <Link
                to={`/dashboard?filter=all&category=${encodeURIComponent(c)}`}
                className="flex items-center gap-2"
              >
                <TagIcon className="h-5 w-5" />
                <span>{c}</span>
              </Link>
            </li>
          ))}
        </ul>

        <div className="px-4 py-4 border-t border-base-300 space-y-2">
          <Link
            to="/profile"
            className="btn btn-ghost btn-sm w-full justify-start flex items-center gap-2"
          >
            <UserIcon className="h-5 w-5" />
            Profile
          </Link>
          <button
            onClick={logout}
            className="btn btn-ghost btn-sm w-full justify-start flex items-center gap-2"
          >
            <LogOutIcon className="h-5 w-5" />
            Log Out
          </button>
        </div>
      </aside>
    </div>
  );
}


===== FILE: frontend\src\components\user\SkillCard.jsx =====
import { useNavigate } from "react-router-dom";
import {
  TagIcon,
  ClipboardListIcon,
  ArrowRightCircleIcon,
} from "lucide-react";
import SkillProgressBar from "./SkillProgressBar";

export default function SkillCard({ skill, to, progress }) {
  const navigate = useNavigate();
  return (
    <div
      onClick={() => navigate(to)}
      className="
        bg-base-100 p-5 shadow hover:shadow-lg
        transition cursor-pointer border border-primary
      "
    >
      <div className="flex items-center justify-between mb-2">
        <h2 className="text-xl font-semibold flex-1">{skill.name}</h2>
        <ArrowRightCircleIcon className="h-6 w-6 text-secondary" />
      </div>

      <div className="flex items-center text-sm opacity-75 mb-4 space-x-4">
        <span className="flex items-center space-x-1">
          <TagIcon className="h-4 w-4" />
          <span>{skill.category}</span>
        </span>
        <span className="flex items-center space-x-1">
          <ClipboardListIcon className="h-4 w-4" />
          <span>{skill.tasks.length} task{skill.tasks.length !== 1 && "s"}</span>
        </span>
      </div>

      {progress !== undefined && (
        <>
          <SkillProgressBar percent={progress} />
          <p className="text-xs opacity-70 mt-1 flex items-center space-x-1">
            <span>{progress}%</span>
            <span>completed</span>
          </p>
        </>
      )}
    </div>
  );
}


===== FILE: frontend\src\components\user\SkillProgressBar.jsx =====

import React from "react";

export default function SkillProgressBar({ percent }) {
  return (
    <div className="w-full bg-base-200 h-5 overflow-hidden mt-2">
      <div
        className="h-full bg-primary transition-all"
        style={{ width: `${percent}%` }}
      />
    </div>
  );
}


===== FILE: frontend\src\components\user\UserNavbar.jsx =====
import { Link, useNavigate, useLocation } from "react-router-dom";
import {
  SunIcon,
  MoonIcon,
  HomeIcon,
  BookOpenIcon,
  GridIcon,
  TreesIcon, // NEW
} from "lucide-react";
import { useState, useEffect } from "react";
import { clearAuth, getToken, getIsAdmin } from "../../lib/auth";

export default function UserNavbar() {
  const navigate = useNavigate();
  const { pathname } = useLocation();
  const loggedIn = !!getToken();
  const isAdmin = getIsAdmin();

  // theme toggle state
  const [forestMode, setForestMode] = useState(
    localStorage.getItem("theme") === "forest"
  );
  useEffect(() => {
    const theme = forestMode ? "forest" : "light-forest";
    document.documentElement.setAttribute("data-theme", theme);
    localStorage.setItem("theme", theme);
  }, [forestMode]);

  const logout = () => {
    clearAuth();
    navigate("/login");
  };

  return (
    <nav className="bg-secondary-content shadow-md">
      <div className="container mx-auto flex justify-between items-center px-4 py-3">
        <Link
          to={loggedIn ? (isAdmin ? "/" : "/dashboard") : "/"}
          className="flex items-center text-xl font-bold space-x-2"
        >
          <GridIcon className="h-6 w-6 text-primary" />
          <span>SkillTree</span>
        </Link>

        <div className="flex items-center space-x-4">
          {/* Theme toggle */}
          <button
            aria-label="Toggle theme"
            className="btn btn-ghost btn-circle btn-sm"
            onClick={() => setForestMode(!forestMode)}
          >
            {forestMode ? (
              <SunIcon className="h-5 w-5" />
            ) : (
              <MoonIcon className="h-5 w-5" />
            )}
          </button>

          {/* Nav links */}
          {loggedIn ? (
            <>
              <Link
                to="/dashboard"
                className={`btn btn-ghost btn-sm flex items-center space-x-1 ${
                  pathname === "/dashboard" ? "btn-active" : ""
                }`}
              >
                <HomeIcon className="h-4 w-4" />
                <span>Dashboard</span>
              </Link>

              <Link
                to="/skills"
                className={`btn btn-ghost btn-sm flex items-center space-x-1 ${
                  pathname.startsWith("/skills") ? "btn-active" : ""
                }`}
              >
                <BookOpenIcon className="h-4 w-4" />
                <span>Skills</span>
              </Link>

              {/* NEW: Forest View link */}
              <Link
                to="/forest"
                className={`btn btn-ghost btn-sm flex items-center space-x-1 ${
                  pathname.startsWith("/forest") ? "btn-active" : ""
                }`}
              >
                <TreesIcon className="h-4 w-4" />
                <span>Forest View</span>
              </Link>

              <button
                onClick={logout}
                className="btn btn-primary btn-sm flex items-center space-x-1"
              >
                <MoonIcon className="h-4 w-4 rotate-90" />
                <span>Log Out</span>
              </button>
            </>
          ) : (
            <>
              <Link to="/login" className="btn btn-primary btn-sm">
                Log In
              </Link>
              <Link to="/register" className="btn btn-primary btn-sm">
                Sign Up
              </Link>
            </>
          )}
        </div>
      </div>
    </nav>
  );
}


===== FILE: frontend\src\views\admin\AdminCreateSkillPage.jsx =====
import { useState } from "react";
import { useNavigate, Link } from "react-router-dom";
import toast from "react-hot-toast";
import { PlusIcon, MinusIcon } from "lucide-react";
import api from "../../lib/axios";
import { CATEGORIES } from "../../lib/categories";

export default function AdminCreateSkillPage() {
  const [name, setName] = useState("");
  const [category, setCategory] = useState(CATEGORIES[0]);
  const [tasks, setTasks] = useState([{ title: "", content: "" }]);
  const [saving, setSaving] = useState(false);
  const navigate = useNavigate();

  const addTask = () =>
    setTasks((prev) => [...prev, { title: "", content: "" }]);
  const removeTask = (idx) =>
    setTasks((prev) => prev.filter((_, i) => i !== idx));
  const updateTask = (idx, key, val) =>
    setTasks((prev) =>
      prev.map((t, i) => (i === idx ? { ...t, [key]: val } : t))
    );

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!name.trim()) return toast.error("Name required");
    if (tasks.some((t) => !t.title.trim() || !t.content.trim()))
      return toast.error("All tasks need title & content");

    setSaving(true);
    try {
      await api.post("/skills", { name, category, tasks });
      toast.success("Skill created");
      navigate("/");
    } catch {
      toast.error("Creation failed");
    } finally {
      setSaving(false);
    }
  };

  return (
    <div className="max-w-3xl mx-auto">
      <Link to="/" className="btn btn-ghost mb-6">‚Üê Back</Link>

      <div className="card bg-base-100 shadow-xl">
        <div className="card-body space-y-8">
          <h2 className="card-title text-2xl">Create Skill</h2>

          <form onSubmit={handleSubmit} className="space-y-8">
            <div>
              <label className="label">Skill Name</label>
              <input
                className="input input-bordered w-full"
                value={name}
                onChange={(e) => setName(e.target.value)}
              />
            </div>

            <div>
              <label className="label">Category</label>
              <select
                className="select select-bordered w-full"
                value={category}
                onChange={(e) => setCategory(e.target.value)}
              >
                {CATEGORIES.map((c) => (
                  <option key={c} value={c}>
                    {c}
                  </option>
                ))}
              </select>
            </div>

            <div className="space-y-4">
              <label className="label">Tasks</label>
              {tasks.map((t, i) => (
                <div key={i} className="space-y-2">
                  <input
                    className="input input-bordered w-full"
                    placeholder="Task title"
                    value={t.title}
                    onChange={(e) => updateTask(i, "title", e.target.value)}
                  />
                  <textarea
                    className="textarea textarea-bordered w-full min-h-[6rem]"
                    placeholder="Task details"
                    value={t.content}
                    onChange={(e) =>
                      updateTask(i, "content", e.target.value)
                    }
                  />
                  <button
                    type="button"
                    className="btn btn-outline btn-error btn-xs"
                    onClick={() => removeTask(i)}
                  >
                    Remove task
                  </button>
                </div>
              ))}

              <button
                type="button"
                className="btn btn-outline btn-secondary"
                onClick={addTask}
              >
                <PlusIcon className="h-5 w-5 mr-2" />
                Add Task
              </button>
            </div>

            <div className="text-right">
              <button
                type="submit"
                className="btn btn-primary px-8"
                disabled={saving}
              >
                {saving ? "Saving‚Ä¶" : "Create Skill"}
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
}


===== FILE: frontend\src\views\admin\AdminSkillDetailPage.jsx =====
import { useState, useEffect } from "react";
import { useParams, useNavigate, Link } from "react-router-dom";
import toast from "react-hot-toast";
import api from "../../lib/axios";
import { PlusIcon } from "lucide-react";
import { CATEGORIES } from "../../lib/categories";

export default function AdminSkillDetailPage() {
  const { id } = useParams();
  const navigate = useNavigate();
  const [skill, setSkill] = useState(null);
  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);

  useEffect(() => {
    api
      .get(`/skills/${id}`)
      .then((res) => setSkill(res.data))
      .catch(() => toast.error("Could not load skill"))
      .finally(() => setLoading(false));
  }, [id]);

  const addTask = () =>
    setSkill((p) => ({ ...p, tasks: [...p.tasks, { title: "", content: "" }] }));
  const removeTask = (idx) =>
    setSkill((p) => ({ ...p, tasks: p.tasks.filter((_, i) => i !== idx) }));
  const updateTask = (idx, key, val) =>
    setSkill((p) => ({
      ...p,
      tasks: p.tasks.map((t, i) => (i === idx ? { ...t, [key]: val } : t)),
    }));

  const handleSave = async () => {
    if (!skill.name.trim()) return toast.error("Name required");
    if (skill.tasks.some((t) => !t.title.trim() || !t.content.trim()))
      return toast.error("All tasks need title & content");

    setSaving(true);
    try {
      await api.put(`/skills/${id}`, {
        name: skill.name,
        category: skill.category,
        tasks: skill.tasks,
      });
      toast.success("Skill updated");
      navigate("/");
    } catch {
      toast.error("Update failed");
    } finally {
      setSaving(false);
    }
  };

  const handleDelete = async () => {
    if (!window.confirm("Delete this skill?")) return;
    try {
      await api.delete(`/skills/${id}`);
      toast.success("Skill deleted");
      navigate("/");
    } catch {
      toast.error("Deletion failed");
    }
  };

  if (loading)
    return (
      <div className="flex justify-center py-20">
        <span className="loading loading-spinner loading-lg"></span>
      </div>
    );
  if (!skill) return <p className="text-center py-20">Skill not found.</p>;

  return (
    <div className="max-w-3xl mx-auto">
      <div className="flex justify-between items-center mb-6">
        <Link to="/" className="btn btn-ghost">
          ‚Üê Back
        </Link>
        <button
          onClick={handleDelete}
          className="btn btn-outline btn-error btn-sm"
        >
          Delete Skill
        </button>
      </div>

      <div className="card bg-base-100 shadow-xl">
        <div className="card-body space-y-8">
          <div>
            <label className="label">Skill Name</label>
            <input
              className="input input-bordered w-full"
              value={skill.name}
              onChange={(e) =>
                setSkill({ ...skill, name: e.target.value })
              }
            />
          </div>

          <div>
            <label className="label">Category</label>
            <select
              className="select select-bordered w-full"
              value={skill.category}
              onChange={(e) =>
                setSkill({ ...skill, category: e.target.value })
              }
            >
              {CATEGORIES.map((c) => (
                <option key={c}>{c}</option>
              ))}
            </select>
          </div>

          <div className="space-y-6">
            <h3 className="text-lg font-semibold">Tasks</h3>

            {skill.tasks.map((t, i) => (
              <div
                key={i}
                className="space-y-2 border-b pb-4 last:border-none"
              >
                <input
                  className="input input-bordered w-full"
                  value={t.title}
                  onChange={(e) => updateTask(i, "title", e.target.value)}
                  placeholder="Title"
                />
                <textarea
                  className="textarea textarea-bordered w-full min-h-[6rem]"
                  value={t.content}
                  onChange={(e) =>
                    updateTask(i, "content", e.target.value)
                  }
                  placeholder="Content"
                />
                <button
                  type="button"
                  className="btn btn-outline btn-error btn-xs"
                  onClick={() => removeTask(i)}
                >
                  Remove task
                </button>
              </div>
            ))}

            <button
              type="button"
              className="btn btn-outline btn-secondary"
              onClick={addTask}
            >
              <PlusIcon className="h-5 w-5 mr-2" /> Add Task
            </button>
          </div>

          <div className="text-right pt-2">
            <button
              onClick={handleSave}
              className="btn btn-primary px-8"
              disabled={saving}
            >
              {saving ? "Saving‚Ä¶" : "Save Changes"}
            </button>
          </div>
        </div>
      </div>
    </div>
  );
}


===== FILE: frontend\src\views\admin\AdminSkillsListPage.jsx =====
import { useState, useEffect } from "react";
import { Link } from "react-router-dom";
import api from "../../lib/axios";
import toast from "react-hot-toast";
import AdminSkillCard from "../../components/admin/AdminSkillCard";

export default function AdminSkillsListPage() {
  const [skills, setSkills] = useState([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    api
      .get("/skills")
      .then((res) => setSkills(res.data))
      .catch(() => toast.error("Could not load skills"))
      .finally(() => setLoading(false));
  }, []);

  if (loading) {
    return (
      <div className="flex justify-center py-20">
        <span className="loading loading-spinner loading-lg"></span>
      </div>
    );
  }

  return (
    <section>
      <div className="flex justify-between items-center mb-8">
        <h1 className="text-3xl font-bold">Skills</h1>
        <Link to="/create-skill" className="btn btn-primary btn-sm">
          + Add Skill
        </Link>
      </div>

      {skills.length === 0 ? (
        <p className="text-center opacity-70 py-16">No skills yet.</p>
      ) : (
        <div className="grid gap-8 sm:grid-cols-2 lg:grid-cols-3">
          {skills.map((s) => (
            <AdminSkillCard key={s._id} skill={s} />
          ))}
        </div>
      )}
    </section>
  );
}


===== FILE: frontend\src\views\user\DashboardPage.jsx =====
// frontend/src/views/user/DashboardPage.jsx
import { useEffect, useState } from "react";
import { Link, useLocation } from "react-router-dom";
import api from "../../lib/axios";
import toast from "react-hot-toast";
import SkillCard from "../../components/user/SkillCard";
import Sidebar from "../../components/user/Sidebar";

export default function DashboardPage() {
  const [learning, setLearning] = useState([]);
  const [loading, setLoading]   = useState(true);

  const { search } = useLocation();
  const params = new URLSearchParams(search);
  const filter = params.get("filter");
  const category = params.get("category");

  useEffect(() => {
    api.get("/learning")
      .then((res) => setLearning(res.data))
      .catch(() => toast.error("Could not load your dashboard"))
      .finally(() => setLoading(false));
  }, []);

  if (loading) {
    return (
      <div className="flex justify-center py-20">
        <span className="loading loading-spinner loading-xl" />
      </div>
    );
  }

  if (!learning.length) {
    return (
      <div className="min-h-screen p-6 flex flex-col items-center justify-center bg-neutral">
        <p className="mb-4">You haven‚Äôt started any skills yet.</p>
        <Link to="/skills" className="btn btn-primary btn-sm">
          Browse Skills
        </Link>
      </div>
    );
  }

  // Start with full list
  let displayed = [...learning];

  // Category filter
  if (category) {
    displayed = displayed.filter((s) => s.category === category);
  }

  // Filter type
  if (filter === "completed") {
    displayed = displayed.filter(
      (s) =>
        s.tasks.length > 0 &&
        s.completedTasks.filter(Boolean).length === s.tasks.length
    );
  } else if (filter === "all") {
    // show everything
  } else {
    // default = in-progress
    displayed = displayed.filter(
      (s) =>
        !(
          s.tasks.length > 0 &&
          s.completedTasks.filter(Boolean).length === s.tasks.length
        )
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-neutral via-neutral to-neutral pb-6">
      {/* Fixed, container-aligned sidebar */}
      <Sidebar learning={learning} />

      {/* Main content inside the SAME container width as navbar */}
      <div className="container mx-auto px-4">
        {/* Reserve space for the fixed sidebar inside the container */}
        <main className="ml-[272px] p-6 pr-0"> 
          

          {displayed.length === 0 ? (
            <p className="text-center opacity-70">
              No skills{" "}
              {filter === "completed" ? "completed" : filter === "all" ? "" : "in progress"}{" "}
              {category && <>in ‚Äú{category}‚Äù</>}.
            </p>
          ) : (
            <div className="flex flex-col gap-6">
              {displayed.map((s) => {
                const total = s.tasks.length;
                const done  = s.completedTasks.filter(Boolean).length;
                const pct   = total ? Math.round((done / total) * 100) : 0;

                return (
                  <div key={s._id} className="w-full">
                    <SkillCard skill={s} to={`/dashboard/${s._id}`} progress={pct} />
                  </div>
                );
              })}
            </div>
          )}
        </main>
      </div>
    </div>
  );
}


===== FILE: frontend\src\views\user\DashboardSkillDetailPage.jsx =====
import { useEffect, useState } from "react";
import { useParams, Link } from "react-router-dom";
import api from "../../lib/axios";
import toast from "react-hot-toast";
import SkillProgressBar from "../../components/user/SkillProgressBar";

export default function DashboardSkillDetailPage() {
  const { id: skillId } = useParams();
  const [entry, setEntry] = useState(null);
  const [loading, setLoading] = useState(true);

  // fetch your learning entry (with tasks + your completedTasks)
  useEffect(() => {
    api
      .get(`/learning/${skillId}`)
      .then((res) => setEntry(res.data))
      .catch(() => toast.error("Could not load skill details"))
      .finally(() => setLoading(false));
  }, [skillId]);

  if (loading) {
    return (
      <div className="flex justify-center py-20">
        <span className="loading loading-spinner loading-lg"></span>
      </div>
    );
  }
  if (!entry) {
    return <p className="text-center py-20">Skill not found.</p>;
  }

  // pick the correct tree image for a given percent
  const stageSrc = (p) => {
    if (p === 0)   return "/trees/seed.png";
    if (p < 25)    return "/trees/sprout.png";
    if (p < 50)    return "/trees/small-plant.png";
    if (p < 75)    return "/trees/young-tree.png";
    if (p < 100)   return "/trees/leafy-tree.png";
    return "/trees/full-tree.png";
  };

  // progress
  const total = entry.tasks.length;
  const done  = entry.completedTasks.filter(Boolean).length;
  const pct   = total ? Math.round((done / total) * 100) : 0;

  // toggle a task's completion state
  const handleToggle = async (index) => {
    try {
      const { data } = await api.patch(`/learning/${skillId}/task/${index}`);
      // merge in the updated completedTasks array
      setEntry((prev) => ({ ...prev, completedTasks: data.completedTasks }));
    } catch {
      toast.error("Could not update that task");
    }
  };

  return (
    <div className="min-h-screen bg-neutral p-6">
      <div className="max-w-3xl mx-auto space-y-6">
        <Link to="/dashboard" className="btn btn-ghost">
          ‚Üê Back to Dashboard
        </Link>

        <div className="card bg-base-100 shadow">
          <div className="card-body">
            <h1 className="text-2xl font-bold mb-1">{entry.name}</h1>
            <p className="text-sm opacity-70 mb-2">{entry.category}</p>

            {/* Tree stage image */}
            <div className="flex flex-col items-center mb-4 w-full">
              <img
                src={stageSrc(pct)}
                alt="Skill growth stage"
                className="w-40 h-40 object-contain"
              />
              {/* NEW: progress bar under the tree */}
              <div className="w-full mt-2">
                <SkillProgressBar percent={pct} />
              </div>
              <div className="text-sm opacity-70 mt-2">{pct}% complete</div>
            </div>

            <h2 className="text-lg font-semibold mb-2">Tasks</h2>
            {entry.tasks.length === 0 ? (
              <p className="opacity-70">No tasks defined for this skill.</p>
            ) : (
              <ul className="space-y-4">
                {entry.tasks.map((t, i) => (
                  <li
                    key={i}
                    className="flex items-start justify-between border-l-4 border-primary pl-4"
                  >
                    <div>
                      <h3 className="font-medium">{t.title}</h3>
                      <p className="text-sm opacity-80 whitespace-pre-wrap">
                        {t.content}
                      </p>
                    </div>
                    <button
                      className={`btn btn-sm ${
                        entry.completedTasks[i] ? "btn-success" : "btn-outline"
                      }`}
                      onClick={() => handleToggle(i)}
                    >
                      {entry.completedTasks[i] ? "‚úì Done" : "Mark Done"}
                    </button>
                  </li>
                ))}
              </ul>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}


===== FILE: frontend\src\views\user\LoginPage.jsx =====
import { useState } from "react";
import { useNavigate, Link } from "react-router-dom";
import api from "../../lib/axios";
import toast from "react-hot-toast";
import { saveToken, saveIsAdmin } from "../../lib/auth";

export default function LoginPage() {
  const [username, setUsername] = useState("");
  const [password, setPassword] = useState("");
  const nav = useNavigate();

  const handle = async (e) => {
    e.preventDefault();
    try {
      const { data } = await api.post("/auth/login", { username, password });
      saveToken(data.token);
      saveIsAdmin(data.isAdmin);

      toast.success("Welcome back!");
      if (data.isAdmin) {
        nav("/");
      } else {
        nav("/dashboard");
      }
    } catch (err) {
      // show only the toast, keep inputs as-is
      toast.error(err.response?.data?.message || "Invalid credentials");
    }
  };

  return (
    <div className="min-h-screen w-full bg-gradient-to-br from-neutral via-neutral to-neutral flex items-center justify-center p-4">
      <form
        onSubmit={handle}
        className="bg-base-100 p-6 w-full max-w-md rounded-lg shadow-lg"
      >
        <h1 className="text-2xl font-semibold text-center mb-6">Log In</h1>
        <input
          type="text"
          placeholder="Username"
          className="input input-bordered w-full mb-4"
          value={username}
          onChange={(e) => setUsername(e.target.value)}
        />
        <input
          type="password"
          placeholder="Password"
          className="input input-bordered w-full mb-6"
          value={password}
          onChange={(e) => setPassword(e.target.value)}
        />
        <button type="submit" className="btn btn-primary w-full mb-4">
          Enter
        </button>
        <p className="text-center">
          Don‚Äôt have an account?{" "}
          <Link to="/register" className="text-blue-700 underline">
            Sign Up
          </Link>
        </p>
      </form>
    </div>
  );
}


===== FILE: frontend\src\views\user\RegisterPage.jsx =====
import { useState } from "react";
import { useNavigate, Link } from "react-router-dom";
import api from "../../lib/axios";
import toast from "react-hot-toast";
import { saveToken, saveIsAdmin } from "../../lib/auth";

export default function RegisterPage() {
  const [username, setUsername] = useState("");
  const [password, setPassword] = useState("");
  const nav = useNavigate();

  const handle = async (e) => {
    e.preventDefault();
    try {
      const { data } = await api.post("/auth/register", { username, password });
      saveToken(data.token);
      saveIsAdmin(data.isAdmin);
      toast.success("Account created!");
      if (data.isAdmin) {
        nav("/");
      } else {
        nav("/dashboard");
      }
    } catch (err) {
      toast.error(err.response?.data?.message || "Registration failed");
    }
  };

  return (
    <div className="min-h-screen w-full bg-gradient-to-br from-neutral via-neutral to-neutral flex items-center justify-center p-4">
      <form
        onSubmit={handle}
        className="bg-base-100 p-6 w-full max-w-md rounded-lg shadow-lg"
      >
        <h1 className="text-2xl font-semibold text-center mb-6">Sign Up</h1>
        <input
          type="text"
          placeholder="Username"
          className="input input-bordered w-full mb-4"
          value={username}
          onChange={(e) => setUsername(e.target.value)}
        />
        <input
          type="password"
          placeholder="Password"
          className="input input-bordered w-full mb-6"
          value={password}
          onChange={(e) => setPassword(e.target.value)}
        />
        <button className="btn btn-primary w-full mb-4">Create</button>
        <p className="text-center">
          Already have one?{" "}
          <Link to="/login" className="text-blue-800 underline">
            Log In
          </Link>
        </p>
      </form>
    </div>
  );
}

===== FILE: frontend\src\views\user\SkillForestPage.jsx =====
import { useEffect, useState } from "react";
import { Link } from "react-router-dom";
import api from "../../lib/axios";
import toast from "react-hot-toast";

export default function SkillForestPage() {
  const [learning, setLearning] = useState([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    api
      .get("/learning")
      .then((res) => setLearning(res.data))
      .catch(() => toast.error("Could not load your learning"))
      .finally(() => setLoading(false));
  }, []);

  if (loading) {
    return (
      <div className="flex justify-center py-20">
        <span className="loading loading-spinner loading-lg"></span>
      </div>
    );
  }

  // map percent -> image
  const stageSrc = (p) => {
    if (p === 0)   return "/trees/seed.png";
    if (p < 25)    return "/trees/sprout.png";
    if (p < 50)    return "/trees/small-plant.png";
    if (p < 75)    return "/trees/young-tree.png";
    if (p < 100)   return "/trees/leafy-tree.png";
    return "/trees/full-tree.png";
  };

  // ‚úÖ Removed per-stage sizeClass. 
  // Now ALL trees will have the same bigger size.
  const treeSize = "w-40 h-40"; // change this to w-40 h-40 if you want even bigger

  const percent = (entry) => {
    const total = entry.tasks.length;
    const done  = entry.completedTasks.filter(Boolean).length;
    return total ? Math.round((done / total) * 100) : 0;
  };

  return (
    <div className="min-h-screen bg-neutral p-6">
      <div className="container mx-auto px-4 space-y-6">
        <div className="flex items-center justify-between">
          <Link to="/dashboard" className="btn btn-ghost text-lg">‚Üê Back</Link>
          <h1 className="text-2xl font-bold">My Skill Forest</h1>
          <div />
        </div>

        <div className="card bg-base-100 shadow">
          <div className="card-body">
            {/* Forest with ground-aligned trees */}
            <div
              className="rounded-xl border border-primary bg-secondary-content/40 p-3 bg-bottom bg-cover"
              style={{
                backgroundImage: "url('/forest/forest-bg.png')",
                imageRendering: "pixelated"
              }}
            >
              {/* One bottom row; scrolls horizontally if needed */}
              <div className="min-h-[600px] overflow-x-auto">
                <div className="grid grid-flow-col auto-cols-max items-end gap-0 h-[460px] px-4 ml-6">
                  {learning.length === 0 ? (
                    <p className="opacity-70 col-span-full py-24">
                      No trees yet. Start learning from the Skills page.
                    </p>
                  ) : (
                    learning.map((e) => {
                      const pct = percent(e);
                      const tip = `${e.name} ‚Äî ${pct}%`;
                      return (
                        <div
                          key={e._id}
                          className="tooltip tooltip-top -ml-6"
                          data-tip={tip}
                        >
                          <Link to={`/dashboard/${e._id}`}>
                            <img
                              src={stageSrc(pct)}
                              alt={e.name}
                              className={`transition-transform hover:scale-110 ${treeSize} mb-[-2px]`}
                              style={{ imageRendering: "pixelated" }}
                            />
                          </Link>
                        </div>
                      );
                    })
                  )}
                </div>
              </div>
            </div>

            <div className="mt-3">
              Hover a tree to see its skill and progress. Click to open details.
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}


===== FILE: frontend\src\views\user\UserSkillDetailPage.jsx =====
import { useEffect, useState } from "react";
import { useParams, Link } from "react-router-dom";
import api from "../../lib/axios";
import toast from "react-hot-toast";

export default function UserSkillDetailPage() {
  const { id } = useParams();
  const [skill, setSkill]     = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    api.get(`/skills/${id}`)
      .then((res) => setSkill(res.data))
      .catch(() => toast.error("Could not load skill"))
      .finally(() => setLoading(false));
  }, [id]);

  if (loading)
    return (
      <div className="flex justify-center py-20">
        <span className="loading loading-spinner loading-lg"></span>
      </div>
    );

  if (!skill) return <p className="text-center py-20">Skill not found.</p>;

  return (
    <div className="min-h-screen w-full bg-neutral p-6 overflow-auto">
      <div className="max-w-3xl mx-auto space-y-8">
        <div className="flex items-center justify-between">
          <Link to="/skills" className="btn btn-ghost">‚Üê Back</Link>
        </div>

        <div className="card bg-base-100 shadow">
          <div className="card-body">
            <h1 className="card-title text-2xl mb-2">{skill.name}</h1>
            <p className="text-sm opacity-70 mb-6">{skill.category}</p>

            <h2 className="text-lg font-semibold mb-3">Tasks</h2>
            {skill.tasks.length === 0 ? (
              <p className="opacity-70">No tasks for this skill yet.</p>
            ) : (
              <ul className="space-y-4">
                {skill.tasks.map((t, i) => (
                  <li key={i} className="border-l-4 border-primary pl-4">
                    <h3 className="font-medium">{t.title}</h3>
                    <p className="text-sm opacity-80 whitespace-pre-wrap">
                      {t.content}
                    </p>
                  </li>
                ))}
              </ul>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}


===== FILE: frontend\src\views\user\UserSkillsListPage.jsx =====
// frontend/src/views/user/UserSkillsListPage.jsx
import { useEffect, useState } from "react";
import { Link, useNavigate } from "react-router-dom";
import { BookOpenIcon, PlusCircleIcon, CheckCircle2Icon } from "lucide-react";
import api from "../../lib/axios";
import toast from "react-hot-toast";

export default function UserSkillsListPage() {
  const [skills, setSkills]     = useState([]);
  const [loading, setLoading]   = useState(true);
  const [learning, setLearning] = useState([]);
  const navigate = useNavigate();

  // load all skills + which ones the user is already learning
  useEffect(() => {
    api.get("/skills")
      .then((res) => setSkills(res.data))
      .catch(() => toast.error("Failed to load skills"))
      .finally(() => setLoading(false));

    api.get("/learning")
      .then((res) => setLearning(res.data.map((s) => s._id)))
      .catch(() => toast.error("Could not load your learning"));
  }, []);

  // start learning a skill
  const handleStart = async (e, id) => {
    e.stopPropagation();
    try {
      await api.post(`/learning/${id}`);
      setLearning((prev) => [...prev, id]);
      toast.success("Skill added to your dashboard!");
    } catch {
      toast.error("Could not start learning");
    }
  };

  if (loading) {
    return (
      <div className="flex justify-center py-20">
        <span className="loading loading-spinner loading-xl" />
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-neutral p-6 overflow-auto">
      <div className="container mx-auto px-4">
        <h1 className="text-3xl font-bold mb-6 text-neutral flex items-center space-x-2">
          <BookOpenIcon className="h-6 w-6" />
          <span>All Skills</span>
        </h1>

        {skills.length === 0 ? (
          <p className="text-center">No skills available.</p>
        ) : (
          <div className="grid gap-6 sm:grid-cols-2 lg:grid-cols-3">
            {skills.map((s) => {
              const isLearning = learning.includes(s._id);
              return (
                <div
                  key={s._id}
                  onClick={() => navigate(`/skills/${s._id}`)}
                  className="
                    bg-base-100 p-5 shadow hover:shadow-lg
                    transition cursor-pointer border border-primary
                  "
                >
                  <h2 className="text-xl font-semibold mb-2">{s.name}</h2>
                  <p className="text-sm opacity-75">{s.category}</p>
                  <p className="text-xs opacity-50 mt-2">
                    {s.tasks.length} task{s.tasks.length !== 1 && "s"}
                  </p>
                  <button
                    className="btn btn-primary btn-sm mt-4 w-full flex items-center justify-center space-x-2"
                    disabled={isLearning}
                    onClick={(e) => handleStart(e, s._id)}
                  >
                    {isLearning ? (
                      <>
                        <CheckCircle2Icon className="h-4 w-4" />
                        <span>Learning ‚úì</span>
                      </>
                    ) : (
                      <>
                        <PlusCircleIcon className="h-4 w-4" />
                        <span>Start Learning</span>
                      </>
                    )}
                  </button>
                </div>
              );
            })}
          </div>
        )}
      </div>
    </div>
  );
}

